import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Filter, CommandObject, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from parse import profile_photo
from config import ADMIN_ID, WEBAPP_URL, BOT_TOKEN
from database import add_new, create_db, get_user_appointments, save_user_picture_and_nickname

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()

class IsAdmin(Filter):
    async def __call__(self, message: Message) -> bool:
        return str(message.from_user.id) == str(ADMIN_ID)



async def keyboard_f(user_idd, message):
    photo = await message.bot.get_user_profile_photos(message.from_user.id, 0, 1)
    try:
        photo_id = photo.photos[0][0].file_id
        url = profile_photo(photo_id, BOT_TOKEN)
    except IndexError:
        url="https://avatars.fastly.steamstatic.com/dc77aa1e255492658605e8981ab7d0f4de6cc245_medium.jpg"
    save_user_picture_and_nickname(user_idd, url, message.from_user.full_name)
    inline_kb_list = [
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", web_app=WebAppInfo(url=WEBAPP_URL+f"?tg_id={user_idd}"))],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    # try:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º\n"
            "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n"
            "‚ùì –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞—Ö",
            reply_markup= await keyboard_f(message.from_user.id, message)
        )
    # except Exception as e:
    #     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
    #     await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("add_new_specialist"), IsAdmin())
async def add_specialist_command(message: Message, command: CommandObject):
    try:
        if not command.args:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_new_specialist —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, —É—Å–ª—É–≥–∞, –≤—Ä–µ–º—è, id_–∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –¥–∞—Ç–∞, –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏, —Ü–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥—É\n"
                "–ü—Ä–∏–º–µ—Ä: /add_new_specialist –ê—Ä—Ç–µ–º –ö–∏—Ä–∏–µ—à–∫–æ–≤, —Å—Ç—Ä–∏–∂–∫–∞ –æ–≤–µ—Ü, 8:00, None, N, 07.03.2025, friday–± 5000"
            )
            return

        args = command.args.split(", ")
        if len(args) != 7:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù—É–∂–Ω–æ 8 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
            return

        specialist, service, time, client_id, is_busy, date, week_day, price = args
        add_new(specialist, service, time, client_id, is_busy, date, week_day, price)
        await message.answer("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {str(e)}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. {str(e)}")

@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/my_appointments - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'"
    )
    await message.answer(help_text, reply_markup= await keyboard_f(message.from_user.id, message))

@dp.message(Command("my_appointments"))
async def my_appointments_command(message: Message):
    try:
        appointments = get_user_appointments(message.from_user.id)
        if not appointments:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        response = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for app in appointments:
            response += (
                f"üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {app['specialist']}\n"
                f"üïí –í—Ä–µ–º—è: {app['time']}\n"
                f"üìÖ –î–∞—Ç–∞: {app['date']}\n"
                f"üîß –£—Å–ª—É–≥–∞: {app['service']}\n\n"
            )
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")


@dp.callback_query(lambda a: a.data=="my_appointments")
async def my_appointments_command(query: CallbackQuery):
    try:
        appointments = get_user_appointments(query.from_user.id)
        if not appointments:
            await query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        response = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for app in appointments:
            response += (
                f"üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {app['specialist']}\n"
                f"üïí –í—Ä–µ–º—è: {app['time']}\n"
                f"üìÖ –î–∞—Ç–∞: {app['date']}\n"
                f"üîß –£—Å–ª—É–≥–∞: {app['service']}\n\n"
            )
        await query.message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")

@dp.message()
async def echo_handler(message: Message) -> None:
    try:
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=await keyboard_f(message.from_user.id, message)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def main() -> None:
    try:
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        create_db()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
